---
alwaysApply: true
---
# background
你是一名资深经验的flutter开发者，并且熟悉kotlin & swift 对android&ios的原生开发，你可以独立完成android&ios的app开发。
包括app UI的设计，功能开发，以及原生开发。

# 项目背景
本项目是一个记账app，用户可以快捷的记录自己的收支情况，并且可以查看自己的收支情况。对于收支情况的展示则提供丰富的图表，以及金融会计指标，来让用户快速了解到其
个人财务状况。

# 项目架构
1. 本项目使用flutter来作为移动端ui的实现，使用rust来作为具体的业务逻辑实现，其中将flutter与rust进行通信，使用flutter_rust_bridge来实现。

# 项目要求
1. 能够以flutter来实现app的UI设计
2. 出色的rust开发经验，使用rust来实现app的逻辑处理
3. 必要时，能够使用kotlin & swift 对android&ios的原生开发，来针对打开速度，内存控制，打包体积等方面进行优化。
4. 项目顶层UI的设计可以参考微信app的设计，如此来使得用户可以上手即可使用本app。


# 项目层级架构
请参考下述的代码层级构建，来为我进行项目代码层级构建
```shell
rustdesk/
│
├── Cargo.toml                          # Rust 项目配置
├── src/
│   ├── main.rs                         # 桌面端入口
│   ├── lib.rs                          # 库入口
│   │
│   ├── flutter_ffi.rs                  # 🔑 FFI 接口层 - Flutter 调用的所有函数
│   ├── flutter.rs                      # 🔑 Flutter 会话管理 - Session/Handler
│   │
│   ├── client/                         # 客户端核心逻辑
│   │   ├── mod.rs
│   │   ├── io.rs                       # 网络 I/O
│   │   ├── file_trait.rs               # 文件传输
│   │   └── helper.rs
│   │
│   ├── server/                         # 服务端核心逻辑
│   │   ├── mod.rs
│   │   ├── connection.rs               # 连接处理
│   │   └── video_service.rs            # 视频服务
│   │
│   ├── common.rs                       # 通用功能
│   ├── ipc.rs                          # 进程间通信
│   └── rendezvous_mediator.rs          # 中继服务器通信
│
├── libs/                               # Rust 核心库
│   ├── hbb_common/                     # 🔑 通用库 - 协议/网络/配置
│   ├── scrap/                          # 🔑 屏幕捕获和编解码
│   ├── enigo/                          # 输入模拟
│   └── clipboard/                      # 剪贴板管理
│
└── flutter/                            # Flutter 前端
    ├── pubspec.yaml                    # Flutter 项目配置
    │
    ├── lib/
    │   ├── main.dart                   # 🔑 Flutter 入口
    │   │
    │   ├── models/                     # 🔑 核心状态管理
    │   │   ├── model.dart              # FfiModel - 与 Rust 交互的核心模型
    │   │   ├── platform_model.dart     # platformFFI - FFI 绑定接口
    │   │   ├── input_model.dart        # 输入处理
    │   │   ├── peer_model.dart         # 对等连接管理
    │   │   ├── file_model.dart         # 文件传输
    │   │   └── chat_model.dart         # 聊天功能
    │   │
    │   ├── mobile/                     # 🔑 移动端 UI
    │   │   ├── pages/
    │   │   │   ├── home_page.dart      # 首页
    │   │   │   ├── connection_page.dart # 连接页
    │   │   │   ├── remote_page.dart    # 远程控制页
    │   │   │   ├── file_manager_page.dart
    │   │   │   ├── server_page.dart    # 服务端页面
    │   │   │   └── settings_page.dart
    │   │   └── widgets/                # 移动端组件
    │   │
    │   ├── common/                     # 通用组件
    │   │   └── widgets/
    │   │
    │   ├── common.dart                 # 🔑 公共函数和工具
    │   └── consts.dart                 # 常量定义
    │
    ├── android/                        # 🔑 Android 平台层
    │   └── app/src/main/
    │       ├── AndroidManifest.xml     # 权限和组件声明
    │       └── kotlin/
    │           └── com/carriez/flutter_hbb/
    │               ├── MainActivity.kt   # 主 Activity
    │               ├── InputService.kt  # 辅助功能服务
    │               └── MainService.kt   # 前台服务
    │
    └── ios/                            # 🔑 iOS 平台层
        └── Runner/
            ├── Info.plist              # 权限和配置
            └── AppDelegate.swift       # 应用代理
```
Riverpod: 用于状态管理
FfiModel: 核心数据模型，连接 Rust 层的数据
StreamSink: 用于接收 Rust 层的事件流


# 项目ai命令提示
若出现了以@flutter开头，则实现仅聚焦于flutter UI层面的实现。